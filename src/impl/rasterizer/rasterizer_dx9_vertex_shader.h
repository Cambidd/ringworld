#ifndef RINGWORLD__RASTERIZER__RASTERIZER_DX9_VERTEX_SHADER_H
#define RINGWORLD__RASTERIZER__RASTERIZER_DX9_VERTEX_SHADER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <d3d9.h>

#include "rasterizer_dx9_vertex.h"

typedef struct VertexShader {
    IDirect3DVertexShader9 *shader;
    const char *filepath;
} VertexShader;
_Static_assert(sizeof(VertexShader) == 0x8);

typedef enum VertexShaderIndex {
    VSH_CONVOLUTION = 0,
    VSH_DEBUG,
    VSH_DECAL,
    VSH_DETAIL_OBJECT_TYPE0,
    VSH_DETAIL_OBJECT_TYPE1,
    VSH_EFFECT,
    VSH_EFFECT_MULTITEXTURE,
    VSH_EFFECT_MULTITEXTURE_SCREENSPACE,
    VSH_EFFECT_ZSPRITE,
    VSH_ENVIRONMENT_DIFFUSE_LIGHT,
    VSH_ENVIRONMENT_DIFFUSE_LIGHT_FF,
    VSH_ENVIRONMENT_FOG,
    VSH_ENVIRONMENT_FOG_SCREEN,
    VSH_ENVIRONMENT_LIGHTMAP,
    VSH_ENVIRONMENT_REFLECTION_BUMPED,
    VSH_ENVIRONMENT_REFLECTION_FLAT,
    VSH_ENVIRONMENT_REFLECTION_LIGHTMAP_MASK,
    VSH_ENVIRONMENT_REFLECTION_MIRROR,
    VSH_ENVIRONMENT_REFLECTION_RADIOSITY,
    VSH_ENVIRONMENT_SHADOW,
    VSH_ENVIRONMENT_SPECULAR_LIGHT,
    VSH_ENVIRONMENT_SPECULAR_SPOT_LIGHT,
    VSH_ENVIRONMENT_SPECULAR_LIGHTMAP,
    VSH_ENVIRONMENT_TEXTURE,
    VSH_LENS_FLARE,
    VSH_MODEL_FOGGED,
    VSH_MODEL,
    VSH_MODEL_FF,
    VSH_MODEL_FAST,
    VSH_MODEL_SCENERY,
    VSH_MODEL_ACTIVE_CAMOUFLAGE,
    VSH_MODEL_ACTIVE_CAMOUFLAGE_FF,
    VSH_MODEL_FOG_SCREEN,
    VSH_MODEL_SHADOW,
    VSH_MODEL_ZBUFFER,
    VSH_SCREEN,
    VSH_SCREEN2,
    VSH_TRANSPARENT_GENERIC,
    VSH_TRANSPARENT_GENERIC_LIT_M,
    VSH_TRANSPARENT_GENERIC_M,
    VSH_TRANSPARENT_GENERIC_OBJECT_CENTERED,
    VSH_TRANSPARENT_GENERIC_OBJECT_CENTERED_M,
    VSH_TRANSPARENT_GENERIC_REFLECTION,
    VSH_TRANSPARENT_GENERIC_REFLECTION_M,
    VSH_TRANSPARENT_GENERIC_SCREENSPACE,
    VSH_TRANSPARENT_GENERIC_SCREENSPACE_M,
    VSH_TRANSPARENT_GENERIC_VIEWER_CENTERED,
    VSH_TRANSPARENT_GENERIC_VIEWER_CENTERED_M,
    VSH_TRANSPARENT_GLASS_DIFFUSE_LIGHT,
    VSH_TRANSPARENT_GLASS_DIFFUSE_LIGHT_M,
    VSH_TRANSPARENT_GLASS_REFLECTION_BUMPED,
    VSH_TRANSPARENT_GLASS_REFLECTION_BUMPED_M,
    VSH_TRANSPARENT_GLASS_REFLECTION_FLAT,
    VSH_TRANSPARENT_GLASS_REFLECTION_FLAT_M,
    VSH_TRANSPARENT_GLASS_REFLECTION_MIRROR,
    VSH_TRANSPARENT_GLASS_TINT,
    VSH_TRANSPARENT_GLASS_TINT_M,
    VSH_TRANSPARENT_METER,
    VSH_TRANSPARENT_METER_M,
    VSH_TRANSPARENT_PLASMA_M,
    VSH_TRANSPARENT_WATER_OPACITY,
    VSH_TRANSPARENT_WATER_OPACITY_M,
    VSH_TRANSPARENT_WATER_REFLECTION,
    VSH_TRANSPARENT_WATER_REFLECTION_M,
    NUM_OF_VERTEX_SHADERS
} VertexShaderIndex;

/**
 * Get the vertex shader for the given index.
 * @param index The index of the vertex shader.
 * @return The vertex shader.
 */
IDirect3DVertexShader9 *rasterizer_dx9_shader_get_vertex_shader(uint16_t vsf_index);

/**
 * Get the vertex shader for the given index.
 * @param vertex_shader_permutation 
 * @param vertex_buffer_type 
 * @return Pointer to the vertex shader.
 */
IDirect3DVertexShader9 *rasterizer_dx9_shader_get_vertex_shader_for_permutation(uint16_t vertex_shader_permutation, VertexBufferType vertex_buffer_type);

#ifdef __cplusplus
}
#endif

#endif
